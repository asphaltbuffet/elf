// Code generated by mockery v2.43.1. DO NOT EDIT.

package mocks

import (
	afero "github.com/spf13/afero"

	mock "github.com/stretchr/testify/mock"

	slog "log/slog"
)

// MockExerciseConfiguration is an autogenerated mock type for the ExerciseConfiguration type
type MockExerciseConfiguration struct {
	mock.Mock
}

type MockExerciseConfiguration_Expecter struct {
	mock *mock.Mock
}

func (_m *MockExerciseConfiguration) EXPECT() *MockExerciseConfiguration_Expecter {
	return &MockExerciseConfiguration_Expecter{mock: &_m.Mock}
}

// GetBaseDir provides a mock function with given fields:
func (_m *MockExerciseConfiguration) GetBaseDir() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetBaseDir")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockExerciseConfiguration_GetBaseDir_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBaseDir'
type MockExerciseConfiguration_GetBaseDir_Call struct {
	*mock.Call
}

// GetBaseDir is a helper method to define mock.On call
func (_e *MockExerciseConfiguration_Expecter) GetBaseDir() *MockExerciseConfiguration_GetBaseDir_Call {
	return &MockExerciseConfiguration_GetBaseDir_Call{Call: _e.mock.On("GetBaseDir")}
}

func (_c *MockExerciseConfiguration_GetBaseDir_Call) Run(run func()) *MockExerciseConfiguration_GetBaseDir_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockExerciseConfiguration_GetBaseDir_Call) Return(_a0 string) *MockExerciseConfiguration_GetBaseDir_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockExerciseConfiguration_GetBaseDir_Call) RunAndReturn(run func() string) *MockExerciseConfiguration_GetBaseDir_Call {
	_c.Call.Return(run)
	return _c
}

// GetFs provides a mock function with given fields:
func (_m *MockExerciseConfiguration) GetFs() afero.Fs {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetFs")
	}

	var r0 afero.Fs
	if rf, ok := ret.Get(0).(func() afero.Fs); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(afero.Fs)
		}
	}

	return r0
}

// MockExerciseConfiguration_GetFs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetFs'
type MockExerciseConfiguration_GetFs_Call struct {
	*mock.Call
}

// GetFs is a helper method to define mock.On call
func (_e *MockExerciseConfiguration_Expecter) GetFs() *MockExerciseConfiguration_GetFs_Call {
	return &MockExerciseConfiguration_GetFs_Call{Call: _e.mock.On("GetFs")}
}

func (_c *MockExerciseConfiguration_GetFs_Call) Run(run func()) *MockExerciseConfiguration_GetFs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockExerciseConfiguration_GetFs_Call) Return(_a0 afero.Fs) *MockExerciseConfiguration_GetFs_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockExerciseConfiguration_GetFs_Call) RunAndReturn(run func() afero.Fs) *MockExerciseConfiguration_GetFs_Call {
	_c.Call.Return(run)
	return _c
}

// GetLanguage provides a mock function with given fields:
func (_m *MockExerciseConfiguration) GetLanguage() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetLanguage")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockExerciseConfiguration_GetLanguage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLanguage'
type MockExerciseConfiguration_GetLanguage_Call struct {
	*mock.Call
}

// GetLanguage is a helper method to define mock.On call
func (_e *MockExerciseConfiguration_Expecter) GetLanguage() *MockExerciseConfiguration_GetLanguage_Call {
	return &MockExerciseConfiguration_GetLanguage_Call{Call: _e.mock.On("GetLanguage")}
}

func (_c *MockExerciseConfiguration_GetLanguage_Call) Run(run func()) *MockExerciseConfiguration_GetLanguage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockExerciseConfiguration_GetLanguage_Call) Return(_a0 string) *MockExerciseConfiguration_GetLanguage_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockExerciseConfiguration_GetLanguage_Call) RunAndReturn(run func() string) *MockExerciseConfiguration_GetLanguage_Call {
	_c.Call.Return(run)
	return _c
}

// GetLogger provides a mock function with given fields:
func (_m *MockExerciseConfiguration) GetLogger() *slog.Logger {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetLogger")
	}

	var r0 *slog.Logger
	if rf, ok := ret.Get(0).(func() *slog.Logger); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*slog.Logger)
		}
	}

	return r0
}

// MockExerciseConfiguration_GetLogger_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLogger'
type MockExerciseConfiguration_GetLogger_Call struct {
	*mock.Call
}

// GetLogger is a helper method to define mock.On call
func (_e *MockExerciseConfiguration_Expecter) GetLogger() *MockExerciseConfiguration_GetLogger_Call {
	return &MockExerciseConfiguration_GetLogger_Call{Call: _e.mock.On("GetLogger")}
}

func (_c *MockExerciseConfiguration_GetLogger_Call) Run(run func()) *MockExerciseConfiguration_GetLogger_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockExerciseConfiguration_GetLogger_Call) Return(_a0 *slog.Logger) *MockExerciseConfiguration_GetLogger_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockExerciseConfiguration_GetLogger_Call) RunAndReturn(run func() *slog.Logger) *MockExerciseConfiguration_GetLogger_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockExerciseConfiguration creates a new instance of MockExerciseConfiguration. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockExerciseConfiguration(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockExerciseConfiguration {
	mock := &MockExerciseConfiguration{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
