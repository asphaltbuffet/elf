// Code generated by mockery v2.43.1. DO NOT EDIT.

package mocks

import (
	tasks "github.com/asphaltbuffet/elf/pkg/tasks"
	mock "github.com/stretchr/testify/mock"
)

// MockChallenge is an autogenerated mock type for the Challenge type
type MockChallenge struct {
	mock.Mock
}

type MockChallenge_Expecter struct {
	mock *mock.Mock
}

func (_m *MockChallenge) EXPECT() *MockChallenge_Expecter {
	return &MockChallenge_Expecter{mock: &_m.Mock}
}

// Solve provides a mock function with given fields: _a0
func (_m *MockChallenge) Solve(_a0 bool) ([]tasks.Result, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for Solve")
	}

	var r0 []tasks.Result
	var r1 error
	if rf, ok := ret.Get(0).(func(bool) ([]tasks.Result, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(bool) []tasks.Result); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]tasks.Result)
		}
	}

	if rf, ok := ret.Get(1).(func(bool) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockChallenge_Solve_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Solve'
type MockChallenge_Solve_Call struct {
	*mock.Call
}

// Solve is a helper method to define mock.On call
//   - _a0 bool
func (_e *MockChallenge_Expecter) Solve(_a0 interface{}) *MockChallenge_Solve_Call {
	return &MockChallenge_Solve_Call{Call: _e.mock.On("Solve", _a0)}
}

func (_c *MockChallenge_Solve_Call) Run(run func(_a0 bool)) *MockChallenge_Solve_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(bool))
	})
	return _c
}

func (_c *MockChallenge_Solve_Call) Return(_a0 []tasks.Result, _a1 error) *MockChallenge_Solve_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockChallenge_Solve_Call) RunAndReturn(run func(bool) ([]tasks.Result, error)) *MockChallenge_Solve_Call {
	_c.Call.Return(run)
	return _c
}

// String provides a mock function with given fields:
func (_m *MockChallenge) String() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for String")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockChallenge_String_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'String'
type MockChallenge_String_Call struct {
	*mock.Call
}

// String is a helper method to define mock.On call
func (_e *MockChallenge_Expecter) String() *MockChallenge_String_Call {
	return &MockChallenge_String_Call{Call: _e.mock.On("String")}
}

func (_c *MockChallenge_String_Call) Run(run func()) *MockChallenge_String_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockChallenge_String_Call) Return(_a0 string) *MockChallenge_String_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockChallenge_String_Call) RunAndReturn(run func() string) *MockChallenge_String_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockChallenge creates a new instance of MockChallenge. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockChallenge(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockChallenge {
	mock := &MockChallenge{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
