// Code generated by mockery v2.43.1. DO NOT EDIT.

package mocks

import (
	afero "github.com/spf13/afero"

	mock "github.com/stretchr/testify/mock"

	tasks "github.com/asphaltbuffet/elf/pkg/tasks"
)

// MockBenchmarker is an autogenerated mock type for the Benchmarker type
type MockBenchmarker struct {
	mock.Mock
}

type MockBenchmarker_Expecter struct {
	mock *mock.Mock
}

func (_m *MockBenchmarker) EXPECT() *MockBenchmarker_Expecter {
	return &MockBenchmarker_Expecter{mock: &_m.Mock}
}

// Benchmark provides a mock function with given fields: _a0, _a1
func (_m *MockBenchmarker) Benchmark(_a0 afero.Fs, _a1 int) ([]tasks.Result, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Benchmark")
	}

	var r0 []tasks.Result
	var r1 error
	if rf, ok := ret.Get(0).(func(afero.Fs, int) ([]tasks.Result, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(afero.Fs, int) []tasks.Result); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]tasks.Result)
		}
	}

	if rf, ok := ret.Get(1).(func(afero.Fs, int) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockBenchmarker_Benchmark_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Benchmark'
type MockBenchmarker_Benchmark_Call struct {
	*mock.Call
}

// Benchmark is a helper method to define mock.On call
//   - _a0 afero.Fs
//   - _a1 int
func (_e *MockBenchmarker_Expecter) Benchmark(_a0 interface{}, _a1 interface{}) *MockBenchmarker_Benchmark_Call {
	return &MockBenchmarker_Benchmark_Call{Call: _e.mock.On("Benchmark", _a0, _a1)}
}

func (_c *MockBenchmarker_Benchmark_Call) Run(run func(_a0 afero.Fs, _a1 int)) *MockBenchmarker_Benchmark_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(afero.Fs), args[1].(int))
	})
	return _c
}

func (_c *MockBenchmarker_Benchmark_Call) Return(_a0 []tasks.Result, _a1 error) *MockBenchmarker_Benchmark_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockBenchmarker_Benchmark_Call) RunAndReturn(run func(afero.Fs, int) ([]tasks.Result, error)) *MockBenchmarker_Benchmark_Call {
	_c.Call.Return(run)
	return _c
}

// String provides a mock function with given fields:
func (_m *MockBenchmarker) String() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for String")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockBenchmarker_String_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'String'
type MockBenchmarker_String_Call struct {
	*mock.Call
}

// String is a helper method to define mock.On call
func (_e *MockBenchmarker_Expecter) String() *MockBenchmarker_String_Call {
	return &MockBenchmarker_String_Call{Call: _e.mock.On("String")}
}

func (_c *MockBenchmarker_String_Call) Run(run func()) *MockBenchmarker_String_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockBenchmarker_String_Call) Return(_a0 string) *MockBenchmarker_String_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockBenchmarker_String_Call) RunAndReturn(run func() string) *MockBenchmarker_String_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockBenchmarker creates a new instance of MockBenchmarker. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockBenchmarker(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockBenchmarker {
	mock := &MockBenchmarker{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
